# This Appveyor configuration file is modified from Stack's documentation
#   https://github.com/commercialhaskell/stack/blob/stable/doc/appveyor.yml
#
# A discussion is available here:
#   https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci
#
build: off

before_test:
# http://help.appveyor.com/discussions/problems/6312-curl-command-not-found
- set PATH=C:\Program Files\Git\mingw64\bin;%PATH%

- curl -sS -ostack.zip -L --insecure https://get.haskellstack.org/stable/windows-x86_64.zip
- 7z x stack.zip stack.exe

cache: 
  - "C:\\sr"


# Skipping commits affecting specific files (GitHub only).
# More details here: /docs/appveyor-yml
skip_commits:
  files:
    - '*.md'

# Only build the master branch (which is also the publication branch)
# This means that pull requests must be tested locally.
branches:
  only:
    - master
      
clone_folder: "c:\\stack"
environment:
  global:
    STACK_ROOT: "c:\\sr"

    # Override the temp directory to avoid sed escaping issues
    # See https://github.com/haskell/cabal/issues/5386
    TMP: "c:\\tmp"

  matrix:
  - ARGS: ""

  # This access token allows Appveyor builds to commit back to github
  # This is required because we don't want anyone at MGAPS to have to install
  # the Haskell toolchain and build the website
  # Commits on the source repository will be automatically reflected
  #
  # Note: this access token has been encrypted using Appveyor's
  # YAML encrypt:
  #   https://ci.appveyor.com/tools/encrypt
  access_token:
    secure: EnBHumjphKgr9azjOM87DXfUVzc4DE0B5jgHRKkzcwPd7Bl1ft3PabCKOkXDa/2T

matrix:
  fast_finish: true

test_script:

- stack --version

# Install toolchain, but do it silently due to lots of output
- stack %ARGS% setup > nul

# Build the website compiler and install it in this directory (stack install)
# The ugly echo "" hack is to avoid complaints about 0 being an invalid file
# descriptor
- echo "" | stack %ARGS% --no-terminal build --ghc-options=-Werror

# At this point, a new executable exists: `mgaps-website`.
# We can use it to build the website from scratch ('rebuild')
# and then check that all internal links are live ('check') 
- stack exec -- mgaps-website rebuild
- stack exec -- mgaps-website check --internal-links

# On success, we commit the built website (in the docs/ folder) back to github
# This is so that it can be visible as a GitHub page.
# Here is more information about committing from an Appveyor build worker:
#   https://www.appveyor.com/docs/how-to/git-push/#creating-github-personal-access-token
on_success:

# Set up repository access based on access tokens
- git config --global credential.helper store
- ps: Add-Content "$HOME\.git-credentials" "https://$($env:access_token):x-oauth-basic@github.com`n"

# An identity is required, even if it is trivial
- git config --global user.name "Appveyor automatic build"
- git config --global user.email "<>"

# Only commit the built website, which is located in docs/
# Note that the commit message contains [skip appveyor] so that the build
# does not trigger another build recursively
# See here: 
#   https://www.appveyor.com/docs/how-to/filtering-commits/#skip-commits
- git checkout -b temp
- git add -A # track all new files
- git commit --allow-empty -uno -m "[skip appveyor] Deployment of built website" -- docs

# Merge temporary branch into master
# then delete temporary branch
- git checkout master
- git pull
- git merge temp -m "[skip appveyor] Merging temp branch"
- git branch -d temp

# Push back to origin
- git push origin master
